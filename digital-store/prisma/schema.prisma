// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String   @map("provider_account_id")
  refresh_token     String?  @db.String
  access_token      String?  @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.String
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now()) @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique @map("session_token") @db.String
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt

  @@map("sessions")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime? @map("email_verified")
  image          String?
  hashedPassword String?
  role           Role      @default(USER)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now()) @updatedAt
  accounts       Account[]
  sessions       Session[]
  reviews        Review[]

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model Category {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  title         String        @unique
  description   String?
  slug          String?
  image         String?
  subcategories Subcategory[]

  @@map("categories")
}

model Subcategory {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  slug        String?
  image       String?
  category    Category  @relation(fields: [categoryId], references: [id])
  categoryId  String    @db.ObjectId
  products    Product[]

  @@map("subcategories")
}

model Product {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  description   String
  price         Float
  stock         Int
  inStock       Boolean
  subcategoryId String       @db.ObjectId
  subcategory   Subcategory? @relation(fields: [subcategoryId], references: [id])
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now()) @updatedAt
  images        Image[]
  reviews       Review[]

  @@map("products")
}

model Image {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  url       String
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  productId String   @db.ObjectId
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@map("reviews")
}
